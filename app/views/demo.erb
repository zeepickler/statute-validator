<html>
  <head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
  </head>
  <body>
    <h1>Welcome to the PDX City Code API Demo Page!</h1>
    <h3>Purpose</h3>
    <p>The purpose of this tool is to turn the <a href="http://www.portlandonline.com/auditor/index.cfm?c=28148">Code of the City of Portland</a> into data. How is this accomplished?</p>
    <h3>City Code As Data</h3>
    <p>Not all, but some statutes involve constraints using numbers. For example, a minimum distance in feet or a maximum noise level in decibels. We can take the data from these statutes and formulate it into something that is meaningful for a computer, like so:</p>
    <pre><code>
    "18.10.060.A": {
      "text": "Maximum sound levels: No person shall operate any equipment or appurtenances thereto
               in commercial construction activities which exceeds 85 dBA, when measured at 50 feet (15.2 
               meters) from the source.  This standard shall not apply to trucks (see Section 18.10.020),
               pile drivers, pavement breakers, scrapers, concrete saws and rock drills.",
      "requirements": [
        {"conditional":"include",
         "sources": {"exclude":["truck",
                    "pile driver", 
                    "pavement breaker", 
                    "scraper", 
                    "concrete saw", 
                    "rock drill"]},
         "value": [{"maximum": 85}],
         "units": "dBA"}
      ]
    }
    </code></pre>
    <p>Here we are looking at the statute <b><a href="http://www.portlandonline.com/auditor/index.cfm?c=28709&a=541431">18.10.060.A</a></b> from <b>Title 18 Noise Control</b> under the section <b>Maximum Permissible Sound Levels for Construction Activities and Equipment</b> . The data is broken into two sections <i>text</i> and <i>requirements</i>. The <i>text</i> section, as you can see, is the actual text of the statute. This is handy for reference when looking at the data itself, but of course can also be retrieved to display on a website or within an app. The <i>requirements</i> section is the actual translation of the statute into data. The use of "conditional" is to explain if for compliance the statute must be within the specified requirement ("include") or outside the requirement ("exclude"). The "sources" attribute is a way to define what the law concerns. The "value" attribute represents our constraint (here a "maximum" of 85). Finally, "units" is used to denote the units of measurement (decibels in this example).</p>

    <p>At this point, we have described how City Code gets translated into data. For the purposes of this prototype, I have converted the entire section of <b>18.10.060 (A-F)</b> into <a href='https://github.com/zeepickler/statute-validator/blob/master/lib/pdx_city_code.json'>data</a>, which is stored as a file.</p>
    
    <h3>What is an API?</h3>
    <p>Before we discuss how to retrieve the above data, it's important to understand what an API is and does. <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a> is an acronym for <b>A</b>pplication <b>P</b>rogramming <b>I</b>nterface. Just as a McDonald's customer can order a "#1" from the menu, an API allows a software developer to use a menu of handy computer commands to give them access to a web service in order to perform some useful work. You might even be using an API every day without realizing it. For example, in the mobile game Candy Crush Saga, it asks you to sign into Facebook. In order for the game to allow you to sign in and use your profile picture in-game, it is using an API provided by <a href="https://developers.facebook.com/products/login">Facebook</a>. A software developer had to look up the commands in Facebook's API documentation and then write the commands into the app to pull off this feat. The API commands execute in the blink of an eye and allows the developer access to web services that create a richer experience for the game player. Before we leave this section, it's interesting to note that while APIs are commonly associated with web services, they may also refer to off-line software tools as well. For example, Apple provides an API called <a href="https://developer.apple.com/metal/">Metal</a>, which gives app developers access to the graphics hardware on Apple mobile devices in order to improve the performance of games and videos. APIs are great because they allow a software developer to speedily include useful functionality into their projects, without needing to understand or manage the underlying (and often complex) details.</p>
    
    <h3>Statute Text Retrieval Demo</h3>
    <p>Imagine we have an app with a red line representing the maximum permissible sound level for construction activities. We want to provide extra information about what the red line means by displaying the text of the statute. To retrieve a statute's text, from within our software we provide the following data to the API server in what is called an HTTP GET request (we're trying to "get" the text back, get it?):</p>
    <pre><code id='text_example'></code></pre>
    <p>As you can see, we are interested in the statute "18.10.060.A" and wish to retrieve "text".</p>
    <p>Go ahead and <button onClick=retrieveText()>Retrieve Text</button> now:</p>
    <pre id='get_text'></pre>
    <p id='get_text_explanation' style="display:none;">What just happened? We sent our HTTP GET request to the API server, it looked at the data we supplied, and because we wanted to retrieve "text", it looked up the proper statute, and turned this information into data to send back to us. As you can see, the statute we requested is listed. As well, we get the text of the statute as we expect. Now we can display this text in our app. Cool!</p>

    <h3>Statute Requirements Retrieval Demo</h3>
    <p>So far, so good! Next, let's imagine that we want to determine where on a graph to draw a red line representing the maximum permissible sound level for construction activities. We need to know what this number is as required by law. To retrieve a statute's requirements, we send another HTTP GET request to the API server with the following data:</p>
    <pre><code id='requirements_example'></code></pre>
    <p>In this case, we supply the statute like before, but instead retrieve "requirements". (Note that we could have requested <i>both</i> "text" and "requirements" for the statute.)</p>
    <p>Let's <button onClick=retrieveRequirements()>Retrieve Requirements</button> and see what happens:</p>
    <pre id='get_requirements'></pre>
    <p id='get_requirements_explanation' style="display:none;">Presto! As before, we get the statute we requested as well as the requirements for this statute. We can now use this information to display the red line at 85 decibels on the graph in our app.</p>

    <h3>Statute Compliance Retrieval Demo</h3>
    <p>Once we have the law as structured data, we can use it to do something quite useful, namely, compare the legal requirements to some observed data to determine compliance. In the City of Beaverton, for example, a sensor records the speed of the car as it moves down the road. If it goes over the speed limit, a camera takes a picture. If this device was in a school zone during school days, the <i>requirement</i> would be a maximum speed of 20 mph and the <i>observed data</i> is the speed of the car as it was recorded. Then, the software makes a decision using this data to determine compliance, taking a picture if the driver was in non-compliance with the law.</p>

    <p>For our final demo, we are interested to know whether we are in compliance with the law. In keeping with our Noise Control theme, imagine that we have a device on a construction site. The device has a microphone that can pick up noises coming from the construction site. In one reading, the device picked up a level of 92 decibels. Using some software on this device, this sensor information is converted into observed data, like so:</p>
    <pre><code id="observed_data_example"></code></pre>
    <p>Now, the software takes this observed data and sends an HTTP GET request to the API to determine compliance:</p>
    <pre><code id="compliance_example"></code></pre>
    <p>Let's <button onClick=retrieveCompliance()>Retrieve Compliance</button> to see if we are in compliance with the law:</p>
    <pre id='get_compliance'></pre>
    <div id='get_compliance_explanation' style="display:none;">
      <p>Ok. Let's break this one down. The API returns our statute in question, which we expect. The "compliance" value is 'false', which means that we are not in compliance with the law. (This is what we expect as the requirement is a maximum of 85 dBA.) The "compliance" value can either be 'true' (in compliance) or 'false' (non-compliance). In the case that we are non-compliant, an additional attribute "reasons_for_noncompliance" will appear. This will give us some indication as to why we failed to comply with the law.</p>
      <p>Using this information, we could have the app send a text message to the foreman as well as the construction project's liason at city hall alerting them to the overly loud construction site noise.</p>
    </div>
    <h3>Challenges Regarding the API</h3>
    <ul>
      <li><b>Data Integrity</b> - Ensuring the integrity of the observed data coming from the sensors is important. Careful thought must be put into backup systems, security, and durability for such a device. As well, sensors must be sourced from reputable manufacturers. If devices are, for example, housed in citizen's automobiles, thought will have to be put into tamper-proofing the sensors. In another sense of the word <i>integrity</i>, sensor data might be directly manipulated by a citizen (like putting a pillow over a microphone in the case of a noise control sensor). Who, indeed, will watch the watchers?</li>
      <br>
      <li><b>Legislation Cycles</b> - As new and revised laws come into effect, the software developer maintaining such an API will need ample time to make the needed updates to the API. This process has to be kept in sync, so when the law goes into effect the API changes go into effect simultaneously. Similarly, software developers making apps using the API will need to keep in sync with the legislation process so their data in accurate and new legal requirements are addressed in the software.</li>
      <br>
      <li><b>Unpopularity of Automated Enforcement</b> - Most critical to the success of the API is how it is visibly seen in the public toward enforcement of the law. In looking at the example of traffic enforcement cameras, it is safe to say there was much <a href="https://en.wikipedia.org/wiki/Traffic_enforcement_camera#Controversy">controversy</a> surrounding their usage: criticism of using it to generate revenue, abuse power, and employ Orwellian surveillance. Careful deliberation with the public will be required to communicate the goals, processes, and reasons for using such an API. When and where should automated processes be used to verify compliance with the law? This is a question that must be answered before such an API can be used effectively. We may find the answer is "sometimes, under certain conditions".</li>
    </ul>
    <h3>Benefits of the API</h3>
    <ul>
      <li><b>Privacy</b> - The API does not involve personally identifying information and observed data used to determine compliance is used for comparison purposes only and then removed from computer memory.</li>
      <br>
      <li><b>Statutes As Data</b> - Once statutes are converted into data, the law can be embedded into software applications. While professionals and city planners traditionally look up the laws in books or online, being able to embed and display these contraints directly in the design and planning software speeds up this information gathering process and ensures each technical constraint is being addressed.</li>
      <br>
      <li><b>Decreasing Costs of Sensors</b> - As sensors continue to become cheaper and cheaper, it is inevitable that they will continue to find new use cases in consumer and government applications. Building an API at this point in time connects the legal end of this sensor ecosystem toward uses in department management, oversight, and enforcement.</li> 
      <br>
      <li><b>Automated Determination of Compliance</b> - The major innovation of this API is the ability to validate statutes involving quantitative data. Using sensors to collect data and the usage of the API for compliance removes the need for people in the information gathering process and the information analysis process.</li>
      <br>
      <li><b>Compliance at Scale</b> - In the demo above, we used the example of determining compliance for a single construction site. However, in actual practice, the API would serve many construction sites and a wide range of compliance issues simultaneously. Working with compliance at scale can create new efficiencies in the information gathering process. For example, using sophisticated image recognition, GPS, and detailed city maps of parking zones, it would be possible to take a high resolution satellite map of the entire city of Portland and rapidly locate every illegally parked car. When these levels of scale are achieved, it would free up personnel to work on more challenging issues.</li>
      <br>
      <li><b>Continuous Compliance</b> - In software development, there is methodology called "Test Driven Development" where the code being written has a 1:1 relationship with tests to verify the code has the behavior we expect. Once tests are written, it becomes trivial to run the tests, and so tests are run frequently in the software development cycle. Similarly, once automated compliance processes exist, as with this API, it becomes trivial to run them frequently. It is possible to imagine a scenario in the future where a driver doesn't go to the DEQ every two years, but instead on-board sensors provided by the DEQ continuously monitor the health of the vehicle.  Continuous tests for compliance will make it tougher for automobile manufacturers to skirt the law, as was the case of <a href="https://en.wikipedia.org/wiki/Volkswagen_emissions_scandal">Volkswagen</a>.</li>
      <br>
      <li><b>Environmental Management</b> - By building a body of technical parameters based on scientific research, it is possible to say what constitutes a healthy forest or a healthy river in terms of the presence or absence of chemicals (determined by sensors) as well as the presence or absence of biological species (determined by image recognition). Given such a spectrum of health, we can begin to give the health of a forest or stream a grade (such as A-F). Based on a specific grade, certain actions may need to be taken or certain recreational activities prohibitied. Using this API, we can determine the grade and update various LED signs in parks (ie. "No Swimming today") and alert land management personnel of changes to the environmental health of the State of Oregon.</li>
      <br>
      <li><b>Promotion of Constrained Legislation</b> - If such an API is put into practice, it will promote the practice of legislating with quantitative constraints.  By legislating only where we need it, it serves the maxim of Jefferson who said "That government is best which governs least."</li>
    </ul>
    <h3>Final Thoughts</h3>
    <p>I hope you now have a better idea of my goals for this API, how it works, and a vision for what it can become. It was a good challenge and I had a lot of fun putting it together. Thank you for your time!</p>
  </body>
  <script>
  $(function (){
    get_text_data = {statutes: [{statute: "18.10.060.A", retrieve: ["text"]}]};
    $('#text_example').html(JSON.stringify(get_text_data, null, 2));

    get_requirements_data = {statutes: [{statute: "18.10.060.A", retrieve: ["requirements"]}]};
    $('#requirements_example').html(JSON.stringify(get_requirements_data, null, 2));

    observed_data = {sources: ["construction site"], value: 92, units: "dBA"};
    $('#observed_data_example').html(JSON.stringify(observed_data, null, 2));

    get_compliance_data = {statutes: [{statute: "18.10.060.A", retrieve: ["compliance"], observed_data: observed_data}]};
    $('#compliance_example').html(JSON.stringify(get_compliance_data, null, 2));
  });
  function retrieveText(){
    $.ajax({
      url: '/',
      type: 'GET',
      beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));},
      data: get_text_data,
      success: function(data) {
        $("#get_text").html(JSON.stringify(data, null, 2));
        $("#get_text_explanation").show();
      },
      error: function(x, textStatus, error){
        alert("Sorry, there was an error retrieving the text. Please try again.");
      }
    });
  }
  function retrieveRequirements(){
    $.ajax({
      url: '/',
      type: 'GET',
      beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));},
      data: get_requirements_data,
      success: function(data) {
        $("#get_requirements").html(JSON.stringify(data, null, 2));
        $("#get_requirements_explanation").show();
      },
      error: function(x, textStatus, error){
        alert("Sorry, there was an error retrieving the requirements. Please try again.");
      }
    });
  }
  function retrieveCompliance(){
    $.ajax({
      url: '/',
      type: 'GET',
      beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));},
      data: get_compliance_data,
      success: function(data) {
        $("#get_compliance").html(JSON.stringify(data, null, 2));
        $("#get_compliance_explanation").show();
      },
      error: function(x, textStatus, error){
        alert("Sorry, there was an error retrieving compliance results. Please try again.");
      }
    });
  }
  </script>
</html>