<html>
  <head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
  </head>
  <body>
    <h1>Welcome to the PDX City Code API Demo Page!</h1>
    <h3>Purpose</h3>
    <p>The purpose of this tool is to think of the <a href="http://www.portlandonline.com/auditor/index.cfm?c=28148">Code of the City of Portland</a> as data. How is this so?</p>
    <h3>City Code As Data</h3>
    <p>Not all, but some statutes involve constraints using numbers. For example, a minimum distance in feet or a maximum noise level in decibels. We can take the data from these statutes and formulate it into something that is meaningful for a computer, like this:</p>
    <pre><code>
    "18.10.060.A": {
      "text": "Maximum sound levels: No person shall operate any equipment or appurtenances thereto
               in commercial construction activities which exceeds 85 dBA, when measured at 50 feet (15.2 
               meters) from the source.  This standard shall not apply to trucks (see Section 18.10.020),
               pile drivers, pavement breakers, scrapers, concrete saws and rock drills.",
      "requirements": [
        {"conditional":"include",
         "source": ["truck",
                    "pile driver", 
                    "pavement breaker", 
                    "scraper", 
                    "concrete saw", 
                    "rock drill"],
         "value": [{"maximum": 85}],
         "units": "dBA"}
      ]
    }
    </code></pre>
    <p>Here we are looking at the statute <b>
      <a href="http://www.portlandonline.com/auditor/index.cfm?c=28709&a=541431">18.10.060.A</a></b> from the section <b>Maximum Permissible Sound Levels for Construction Activities and Equipment</b> from <b>Title 18 Noise Control</b>. The data is broken into two sections <i>text</i> and <i>requirements</i>. The <i>text</i> section, as you can see, is the actual text of the statute. This is handy for reference when looking at the data itself, but of course can also be retrieved to display on a website or within an app. The <i>requirements</i> section is the actual translation of the statute into data. The use of "conditional" is to explain if for compliance the statute must be within the specified requirement ("include") or outside the requirement ("exclude"), "source" is a way of breaking up the subjects we're talking about, "value" represents our constraint (here a "maximum" of 85), and "units" to describe the units of measurement (decibels in this example).</p>

    <p>At this point, we have described how City Code gets translated into data. For the purposes of this prototype, I have converted the entire section of 18.10.060 (A-F) into data, which is stored as a file. Sidenote: For the computer nerds among you, you will recognize the format of the code above as JSON, a useful data format frequently used for APIs and well-liked by software developers.</p>
    
    <h3>What is an API?</h3>
    <p>Before we discuss how to retrieve the above data, it's important to understand what an API is and does. <a href="https://en.wikipedia.org/wiki/Application_programming_interface">API</a> is an acronym for <b>A</b>pplication <b>P</b>rogramming <b>I</b>nterface. Just as a McDonald's customer can order a "#1" from the menu, an API allows a software developer to use a menu of handy computer commands giving them access to a service in order to perform some useful work. You might even be using an API every day without realizing it. For example, in the mobile game Candy Crush Saga, it asks you to sign into Facebook. In order for the game to allow you to sign in and use your profile picture in-game, it is using an API provided by <a href="https://developers.facebook.com/products/login">Facebook</a>. A software developer had to look up the commands in Facebook's API documentation and then write the commands into their code to pull off this feat. The API commands execute in the blink of an eye and allows the developer access to services that creates a richer experience for the game player. Before we leave this section, it's interesting to note that while APIs are often thought of as having to do with the Web, they also may refer to off-line software tools as well. For example, Apple provides an API called <a href="https://developer.apple.com/metal/">Metal</a>, which gives app developers access to the graphics hardware on Apple mobile devices in order to improve the performance of games and videos.</p>
    
    <h3>Statute Text Retrieval Demo</h3>
    <p>Imagine we have an app with a red line representing the maximum permissible sound level for construction activities. We want to provide extra information about what the red line means by displaying the text of the statute. To retrieve a statute's text, we send a GET request to the API, providing it the following data:</p>
    <pre><code id='text_example'></code></pre>
    <p>As you can see, we are interested in the statute "18.10.060.A" and wish to retrieve "text".</p>
    <p>Go ahead and <button onClick=retrieveText()>Retrieve Text</button> now:</p>
    <pre id='get_text'></pre>
    <p id='get_text_explanation' style="display:none;">Here is the data we get back. As you can see, the statute we requested is listed. As well, we get the text of the statute as we expect. Now we can display this text in our app.</p>

    <h3>Statute Requirements Retrieval Demo</h3>
    <p>So far, so good! Next, let's imagine that we want to display a red line on a graph in our app representing the maximum permissible sound level for construction activities. We need to know what this number is as required by law. To retrieve a statute's requirements, we send a GET request to the API, providing it the following data:</p>
    <pre><code id='requirements_example'></code></pre>
    <p>In this case, we supply the statute like before, but instead retrieve "requirements". (Note that we could have requested <i>both</i> text and requirements for the statute.)</p>
    <p>Alright, time to <button onClick=retrieveRequirements()>Retrieve Requirements</button> and see what happens:</p>
    <pre id='get_requirements'></pre>
    <p id='get_requirements_explanation' style="display:none;">Presto! As before, we get the statute we requested as well as the requirements for this statute. We now know that the maximum value is 85 decibels and we can display this information in our app in a way that is helpful for our users.</p>
    

    <h3>Interlude: Thoughts On Compliance</h3>
    <p>The most complicated part of this project has been thinking about how to translate and organize the logic of the law into structured data that works across the statutes under my study (18.10.060 (A-F)). My goal is to ensure that the legal data structure is flexible enough as to make it applicable to law in any legal context (city, state, federal) and anywhere regulations are used.</p>
    <p>Once we have the law as structured data, we can use it to do something quite useful, namely, compare the legal requirements to observed data to determine compliance. In the City of Beaverton, for example, a sensor records the speed of the car as it moves down the road. If it goes over the speed limit, a camera takes a picture of the car in question. If this device was in a school zone during school days, the requirement would be a maximum speed of 20 mph and the observed data is the speed of the car as it was recorded. In order for the device to determine if it should take a picture, the number "20" had to be encoded into the device. However, using an API, we can simply supply the recorded speed (the observed data) to determine if the driver complies with the law. By relying on an API, we don't have to store legal requirement data on each device and manually update every device should the law change. In our case, should the law change, only the API itself is updated. It is worth pointing out that the decision to separate the API from the sensor was an intentional architectural decision. There are two reasons for this:</p>
    <ol>
      <li>It puts the responsibility on the software developer writing an application to retrieve the sensor data and pass it onto the API. Should a radar sensor change its data format or should the "industry standard" data format for a sensor be updated, we localize this complexity down to the level of the software application using the sensor data.</li>
      <li>Scientists might discover a new scientific unit of measure, causing engineers to create a whole new category of devices to measure this scientific unit. This would result in major complexity to coordinate all the various new implementations of each sensor data format into the codebase of the API. Instead, all we have to do is denote the name of the new unit of measure, ie. "'units': 'zorgawatts'" in our requirements.</li>
    </ol>
    <p>As a result, the API becomes a very simple and flexible system, able to keep up with changes in science and technology.</p>
    <h3>Statute Compliance Retrieval Demo</h3>
    <p>For the final demo, we are interested to know whether we are in compliance with the law. In keeping with our Noise Control theme, imagine that we have a device on a construction site. The device has a microphone that can pick up noises coming from the construction site. The device picks up a reading of 92 decibels. Using some software on this device, this sensor information is converted into observed data, like so:</p>
    <pre><code id="observed_data_example"></code></pre>
    <p>Now, the software takes this observed data and sends a GET request to the API to determine compliance:</p>
    <pre><code id="compliance_example"></code></pre>
    <p>Drumroll! It's time to <button onClick=retrieveCompliance()>Retrieve Compliance</button></p>
    <pre id='get_compliance'></pre>
    <div id='get_compliance_explanation' style="display:none;">
      <p>Ok. Let's break this one down. The API returns our statute in question, which we expect. The "compliance" value is 'false', which means that we are not in compliance with the law. (This is what we expect as the requirement is a maximum of 85 dBA.) The "compliance" value can either be 'true' (in compliance) or 'false' (non-compliance). In the case that we are non-compliant, an additional attribute "reasons_for_noncompliance" will appear. This will give us some indication as to why we failed to comply.</p>
      <p>Once our software developer gets this information back from the API, one thing the software might do is send a text message to the foreman as well as the construction project's liason at city hall if the results are in non-compliance (as our example shows).</p>
    </div>
    <h3>Benefits of the API</h3>
    <ul>
      <li><b>Privacy</b> - The API does not involve personally identifying information and observed data used to determine compliance is used for comparison purposes only and then removed from computer memory.</li>
      <br>
      <li><b>Statutes As Data</b> - Once statutes are converted into data, the requirements can be embedded into software applications. While professionals and city planners traditionally look up the laws in books or online, being able to embed and display these contraints directly into the design and planning software speed up this process and ensure each technical constraint is being met.</li>
      <br>
      <li><b>Decreasing Costs of Sensors</b> - As sensors continue to become cheaper and cheaper, it is inevitable that they will continue to find new use cases in consumer and government applications. Building an API at this point in time connects the legal end of this "sensor ecosystem" toward roles in department management, oversight, and enforcement.</li> 
      <br>
      <li><b>Automated Determination of Compliance</b> - The major innovation of this API is the ability to validate statutes involving quantitative data. Using sensors to collect data and the usage of the API for compliance validation removes the need for people in the information gathering process and the information analysis process. It all happens in fractions of a second.</li>
      <br>
      <li><b>Compliance at Scale</b> - In the demo above, we used the example of determining compliance of noise levels at a single construction site. However, in actual practice, the API would service this validation for construction sites all over Portland.  When we can turn observations into data, we can suck up large quantities of such data and process it at once. For example, using sophisticated image recognition, GPS, and detailed City maps of parking zones, it would be plausible to take a high resolution satellite map of the entire city of Portland and rapidly locate every illegally parked car. When these levels of scale are achieved, it would free up the entire parking enforcement department to work on more challenging problems in the Transportation Department.</li>
      <br>
      <li><b>Continuous Compliance</b> - In software development, there is methodology called "Test Driven Development" where the code being written has a 1:1 relationship with tests to verify the code has the behavior we expect. Once tests are written, it becomes trivial to run the tests and so tests are run frequently in the software development cycle. Similarly, once automated compliance processes exist as with this API, it becomes trivial to run them frequently. It is plausible to imagine a scenario where a driver doesn't go to the DEQ every two years, but instead on-board sensors provided by the DEQ continuously monitor the health of the vehicle.  Continuous monitoring will make it tougher for automobile manufacturers to skirt the law, as was the case of <a href="https://en.wikipedia.org/wiki/Volkswagen_emissions_scandal">Volkswagen.</a></li>
      <br>
      <li><b>Environmental Management</b> - By building a body of technical parameters based on scientific research, it is possible to say what constitutes a healthy forest or a healthy river in terms of the presence or absence of chemicals (determined by sensors) as well as the presence or absence of biological species (determined by image recognition). Given such a spectrum of health, we can begin to give the health of a forest or stream a grade (such as A-F). Based on a specific grade, certain actions may need to be taken or certain recreational activities prohibitied. Using this API, we can then determine the grade and update various LED signs (ie. "No Swimming or Hunting today") and alert Land Management of any changes in environmental health.</li>
      <br>
      <li><b>Promotion of Constrained Legislation</b> - If such an API is put into practice, my hope is that it will serve as a handy reminder for lawmakers to seek ways where legislation under deliberation can be constrained within quantitative requirements. By legislating only where we need it, it serves the maxim of Jefferson who said "That government is best which governs least."</li>
    </ul>
    <h3>Challenges Regarding the API</h3>
    <ul>
      <li><b>Data Integrity</b> - Ensuring that the observed data coming from the sensors is very important. Careful thought must be put into the backup systems and security for such a device. If devices are, for example, housed in citizen's automobiles, thought will have to be put into tamper-proofing the sensors. In another sense of integrity, devices may be toyed with (like putting a pillow over a microphone in the case of a noise control sensor). Who, indeed, will watch the watchers?</li>
      <br>
      <li><b>Legislation Cycles</b> - As new and revised laws come into effect, the software developer maintaining such an API will need ample time to make the needed updates to the API. This process has to be kept in sync so when the law goes into effect, the API changes go into effect simultaneously.</li>
      <br>
      <li><b>Syncing of Downstream Sensor Software</b> - Similarly, software developers making apps using the API will need to keep in sync with the legislation process so their data in accurate and new legal requirements are addressed in the software.</li>
      <br>
      <li><b>Voter Unpopularity of Automated Enforcement</b> - Most critical to the success of the API is how it is visibly seen in public toward enforcement of the law. In looking at traffic enforcement cameras, it is safe to say there was much <a href="https://en.wikipedia.org/wiki/Traffic_enforcement_camera#Controversy">controversy</a> surrounding their usage. The specific case in question is where automated enforcement processes are used against a person.  In one sense, it is quite literally an inhumane and antisocial approach to enforcement.  "Human cyborg relations" will be a challenging area to get right. As such, it is important to initially focus on those areas like operational efficiency, where gains can immediately be seen. An alternate strategy is to use this API only for "self-improvement" purposes as a negative feedback loop. The rationale being that it is an authoritative source because no human oversight is involved. Using Fitbit as an example of this strategy, when people are presented with the data of where they are and where they need to be, it becomes easier to self-correct.</li>
    </ul>
    <h3>Conclusion</h3>
    <p>I hope you now have a better idea of my goals for this API, how it works, and the vision for what it can become. It was a good challenge for my skills and I had a lot of fun putting this prototype together. Thank you for your time!</p>
  </body>
  <script>
  $(function (){
    get_text_data = {statutes: [{statute: "18.10.060.A", retrieve: ["text"]}]};
    $('#text_example').html(JSON.stringify(get_text_data, null, 2));

    get_requirements_data = {statutes: [{statute: "18.10.060.A", retrieve: ["requirements"]}]};
    $('#requirements_example').html(JSON.stringify(get_requirements_data, null, 2));

    observed_data = {sources: ["construction site"], value: 92, units: "dBA"};
    $('#observed_data_example').html(JSON.stringify(observed_data, null, 2));

    get_compliance_data = {statutes: [{statute: "18.10.060.A", retrieve: ["compliance"], observed_data: observed_data}]};
    $('#compliance_example').html(JSON.stringify(get_compliance_data, null, 2));
  });
  function retrieveText(){
    $.ajax({
      url: '/',
      type: 'GET',
      beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));},
      data: get_text_data,
      success: function(data) {
        $("#get_text").html(JSON.stringify(data, null, 2));
        $("#get_text_explanation").show();
      },
      error: function(x, textStatus, error){
        alert("Sorry, there was an error retrieving the text. Please try again.");
      }
    });
  }
  function retrieveRequirements(){
    $.ajax({
      url: '/',
      type: 'GET',
      beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));},
      data: get_requirements_data,
      success: function(data) {
        $("#get_requirements").html(JSON.stringify(data, null, 2));
        $("#get_requirements_explanation").show();
      },
      error: function(x, textStatus, error){
        alert("Sorry, there was an error retrieving the requirements. Please try again.");
      }
    });
  }
  function retrieveCompliance(){
    $.ajax({
      url: '/',
      type: 'GET',
      beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));},
      data: get_compliance_data,
      success: function(data) {
        $("#get_compliance").html(JSON.stringify(data, null, 2));
        $("#get_compliance_explanation").show();
      },
      error: function(x, textStatus, error){
        alert("Sorry, there was an error retrieving compliance results. Please try again.");
      }
    });
  }
  </script>
</html>